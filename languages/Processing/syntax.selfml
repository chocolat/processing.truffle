(root source.processing
    (zone meta.package.processing
        (match
            (regex [^\s*(package)\b(?:\s*([^ ;$]+)\s*(;)?)?]
                (3 punctuation.terminator.processing)
                (1 keyword.other.package.processing)
                (2 storage.modifier.package.processing))))
    (zone meta.import.static.processing
        (match
            (regex [^\s*(import static)\b(?:\s*([^ ;$]+)\s*(;)?)?]
                (3 punctuation.terminator.processing)
                (1 keyword.other.import.static.processing)
                (2 storage.modifier.import.processing))))
    (zone meta.import.processing
        (match
            (regex [^\s*(import)\b(?:\s*([^ ;$]+)\s*(;)?)?]
                (3 punctuation.terminator.processing)
                (1 keyword.other.import.processing)
                (2 storage.modifier.import.processing))))
    (include @class-body))

(collection constants-and-special-vars
    (include @processing-variables-and-constants)
    (zone constant.language.processing
        (match
            (list true false null)
            (boundary.both)))
    (zone variable.language.processing
        (match
            (list this super)
            (boundary.both)))
    (zone constant.numeric.processing
        (match
            (regex [\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\b])))
    (zone constant.other.processing
        (match
            (regex [(\.)?\b([A-Z][A-Z0-9_]+)(?!<|\.class|\s*\w+\s*=)\b]
                (1 keyword.operator.dereference.processing)))))

(collection values
    (include @strings)
    (include @object-types)
    (include @constants-and-special-vars))

(collection class
    (zone meta.class.processing
        (start
            (regex [(?=\w?[\w\s]*(?:class|(?:@)?interface|enum)\s+\w+)]))
        (end
            (regex [}]
                (0 punctuation.section.class.end.processing)))
        (subzones
            (include @storage-modifiers)
            (include @comments)
            (zone meta.class.identifier.processing
                (match
                    (regex [(class|(?:@)?interface|enum)\s+(\w+)]
                        (1 storage.modifier.processing)
                        (2 entity.name.type.class.processing))))
            (zone meta.definition.class.inherited.classes.processing
                (start
                    (regex extends
                        (0 storage.modifier.extends.processing)))
                (end
                    (regex [(?={|implements)]))
                (subzones
                    (include @object-types-inherited)
                    (include @comments)))
            (zone meta.definition.class.implemented.interfaces.processing
                (start
                    (regex [(implements)\s]
                        (1 storage.modifier.implements.processing)))
                (end
                    (regex [(?=\s*extends|\{)]))
                (subzones
                    (include @object-types-inherited)
                    (include @comments)))
            (zone meta.class.body.processing
                (start [{])
                (end
                    (regex [(?=})]))
                (subzones
                    (include @class-body))))))

(collection parameters
    (zone storage.modifier.processing
        (match final))
    (include @primitive-arrays)
    (include @primitive-types)
    (include @object-types)
    (zone variable.parameter.processing
        (match
            (regex \w+))))

(collection comments-javadoc
    (zone comment.block.documentation.processing
        (start
            (regex /\*\*
                (0 punctuation.definition.comment.processing)))
        (end
            (regex \*/
                (0 punctuation.definition.comment.processing)))
        (subzones
            (zone
                (match
                    (regex [\{\s*(@link)\s*([a-zA-Z_][a-zA-Z0-9_]+)\s*\}]
                        (0 keyword.other.documentation.inlinetag.processing)
                        (1 keyword.other.documentation.tag.processing)
                        (2 keyword.other.documentation.value.processing))))
            (include @comments-javadoc-tags))))

(collection code
    (include @comments)
    (include @class)
    (zone
        (start [{])
        (end [}])
        (subzones
            (include @code)))
    (include @assertions)
    (include @parens)
    (include @constants-and-special-vars)
    (include @anonymous-classes-and-new)
    (include @keywords)
    (include @storage-modifiers)
    (include @strings)
    (include @all-types)
    (include @processing-methods)
    (include @processing-classes))

(collection anonymous-classes-and-new
    (zone
        (start
            (regex \bnew\b
                (0 keyword.control.new.processing)))
        (end
            (regex `(?<=\)|\])(?!\s*{)|(?<=})|(?=;)`))
        (subzones
            (zone
                (start
                    (regex `(\w+)\s*(?=\[)`
                        (1 storage.type.processing)))
                (end
                    (regex [}|(?=\s*(?:;|\)))]))
                (subzones
                    (zone
                        (start
                            (regex `\[`))
                        (end
                            (regex `\]`))
                        (subzones
                            (include @code)))
                    (zone
                        (start [{])
                        (end
                            (regex [(?=})]))
                        (subzones
                            (include @code)))))
            (zone
                (start
                    (regex [(?=\w.*\()]))
                (end
                    (regex [(?<=\))]))
                (subzones
                    (include @object-types)
                    (zone
                        (start
                            (regex [\(]
                                (1 storage.type.processing)))
                        (end
                            (regex [\)]))
                        (subzones
                            (include @code)))))
            (zone meta.inner-class.processing
                (start [{])
                (end [}])
                (subzones
                    (include @class-body))))))

(collection assertions
    (zone meta.declaration.assertion.processing
        (start
            (regex [\b(assert)\s]
                (1 keyword.control.assert.processing)))
        (end
            (regex $))
        (subzones
            (zone keyword.operator.assert.expression-seperator.processing
                (match :))
            (include @code))))

(collection annotations
    (zone meta.declaration.annotation.processing
        (start
            (regex [(@[^ (]+)(\()]
                (1 storage.type.annotation.processing)
                (2 punctuation.definition.annotation-arguments.begin.processing)))
        (end
            (regex [(\))]
                (1 punctuation.definition.annotation-arguments.end.processing)))
        (subzones
            (zone
                (match
                    (regex [(\w*)\s*(=)]
                        (1 constant.other.key.processing)
                        (2 keyword.operator.assignment.processing))))
            (include @code)
            (zone punctuation.seperator.property.processing
                (match ,))))
    (zone storage.type.annotation.processing
        (match
            (regex @\w*))))

(collection object-types-inherited
    (zone entity.other.inherited-class.processing
        (start
            (regex [\b((?:[a-z]\w*\.)*[A-Z]+\w*)<]))
        (end
            (regex [>|[^\w\s,<]]))
        (subzones
            (include @object-types)
            (zone storage.type.generic.processing
                (start <)
                (end
                    (regex [>|[^\w\s,<]])))))
    (zone entity.other.inherited-class.processing
        (match
            (regex [\b(?:[a-z]\w*(\.))*[A-Z]+\w*]
                (1 keyword.operator.dereference.processing)))))

(collection class-body
    (include @comments)
    (include @class)
    (include @enums)
    (include @methods)
    (include @annotations)
    (include @storage-modifiers)
    (include @code))

(collection processing-classes
    (zone support.type.object.processing
        (match
            (regex [\b(P(Applet|Constants|Font|Graphics|Graphics2D|Graphics3D|GraphicsJava2D|Image|Line|Matrix|Matrix2D|Matrix3D|Polygon|Shape|ShapeSVG|SmoothTriangle|Style|Triangle|Vector)|StdXML(Builder|Parser|Reader)|XML(Element|EntityResolver|Exception|ParseException|ValidationException|Validator|Writer))\b]))))

(collection strings
    (zone string.quoted.double.processing
        (start
            (regex "
                (0 punctuation.definition.string.begin.processing)))
        (end
            (regex "
                (0 punctuation.definition.string.end.processing)))
        (subzones
            (zone constant.character.escape.processing
                (match
                    (regex \\.)))))
    (zone string.quoted.single.processing
        (start
            (regex '
                (0 punctuation.definition.string.begin.processing)))
        (end
            (regex '
                (0 punctuation.definition.string.end.processing)))
        (subzones
            (zone constant.character.escape.literal.processing
                (match
                    (regex [\\([0-7]{3}|u[A-Fa-f0-9]{4})])))
            (zone constant.character.escape.processing
                (match
                    (regex \\.))))))

(collection keywords
    (zone keyword.operator.assignment.bitwise.processing
        (match
            (regex [((&|\^|\||<<|>>>?)=)])))
    (zone keyword.operator.bitwise.processing
        (match
            (regex [(<<|>>>?|~|\^)])))
    (zone keyword.control.catch-exception.processing
        (match
            (list try catch finally throw)
            (boundary.both)))
    (zone keyword.control.ternary.processing
        (match
            (regex \?|:)))
    (zone keyword.control.processing
        (match
            (list return break case continue default do while for switch if else)
            (boundary.both)))
    (zone keyword.operator.instanceof.processing
        (match
            (list instanceof)
            (boundary.both)))
    (zone keyword.operator.comparison.processing
        (match
            (regex [(===?|!=|<=|>=|<>|<|>)])))
    (zone keyword.operator.assignment.arithmetic.processing
        (match
            (regex [([+*/%-]=)])))
    (zone keyword.operator.assignment.processing
        (match
            (list =)))
    (zone keyword.operator.increment-decrement.processing
        (match
            (regex [(\-\-|\+\+)])))
    (zone keyword.operator.arithmetic.processing
        (match
            (regex [(\-|\+|\*|\/|%)])))
    (zone keyword.operator.logical.processing
        (match
            (regex [(!|&&|\|\|)])))
    (zone keyword.operator.bitwise.processing
        (match
            (regex [(\||&)])))
    (zone keyword.operator.dereference.processing
        (match
            (regex [(?<=\S)\.(?=\S)])))
    (zone punctuation.terminator.processing
        (match ;)))

(collection comments-inline
    (zone comment.block.processing
        (start
            (regex [/\*(?!\*)]
                (0 punctuation.definition.comment.processing)))
        (end
            (regex \*/
                (0 punctuation.definition.comment.processing))))
    (zone
        (match
            (regex [\s*((//).*$\n?)]
                (1 comment.line.double-slash.processing)
                (2 punctuation.definition.comment.processing)))))

(collection throws
    (zone meta.throwables.processing
        (start
            (regex throws
                (0 storage.modifier.processing)))
        (end
            (regex [(?={|;)]))
        (subzones
            (include @object-types))))

(collection primitive-types
    (zone storage.type.primitive.processing
        (match
            (regex [\b(?:void|boolean|byte|char|color|short|int|float|long|double)(?!\s*\()\b]))))

(collection all-types
    (include @primitive-arrays)
    (include @primitive-types)
    (include @object-types))

(collection comments-javadoc-tags
    (zone
        (match
            (regex [(@param)\s+([a-zA-Z_][a-zA-Z0-9_]+)\b]
                (1 keyword.other.documentation.params.processing)
                (2 keyword.other.documentation.value.processing))))
    (zone keyword.other.documentation.tag.processing
        (match
            (regex [@[a-zA-Z]+\b]))))

(collection processing-methods
    (zone support.function.processing
        (match
            (regex [\b(?<!\.)(abs|acos|alpha|ambient|ambientLight|append|applyMatrix|arc|arrayCopy|asin|atan|atan2|background|beginCamera|beginRaw|beginRecord|beginShape|bezier|bezierDetail|bezierPoint|bezierTangent|bezierVertex|binary|blend|blendColor|blue|boolean|box|brightness|byte|cache|camera|ceil|char|charAt|color|colorMode|concat|constrain|contract|copy|cos|createFont|createGraphics|createImage|createInput|createOutput|createReader|createWriter|cursor|curve|curveDetail|curvePoint|curveSegments|curveTangent|curveTightness|curveVertex|day|degrees|delay|directionalLight|dist|draw|duration|ellipse|ellipseMode|emissive|endCamera|endRaw|endRecord|endShape|equals|exit|exp|expand|fill|filter|float|floor|frameRate|frustum|get|green|hex|hint|hour|hue|image|imageMode|indexOf|int|join|keyPressed|keyReleased|keyTyped|length|lerp|lerpColor|lightFalloff|lights|lightSpecular|line|link|list|loadBytes|loadFont|loadImage|loadPixels|loadShape|loadSound|loadStrings|log|lookat|loop|mag|map|mask|match|matchAll|max|millis|min|minute|modelX|modelY|modelZ|month|mouseClicked|mouseDragged|mouseMoved|mousePressed|mouseReleased|nf|nfc|nfp|nfs|noCursor|noFill|noise|noiseDetail|noiseSeed|noLights|noLoop|norm|normal|noSmooth|noStroke|noTint|open|openStream|ortho|param|pause|perspective|play|point|pointLight|popMatrix|popStyle|pow|print|printCamera|println|printMatrix|printProjection|pushMatrix|pushStyle|quad|radians|random|randomSeed|rect|rectMode|red|redraw|requestImage|resetMatrix|reverse|rotate|rotateX|rotateY|rotateZ|round|saturation|save|saveBytes|saveFrame|saveStream|saveStrings|scale|screenX|screenY|screenZ|second|selectFolder|selectInput|selectOutput|set|setup|shape|shapeMode|shininess|shorten|sin|size|skewX|skewY|smooth|sort|specular|sphere|sphereDetail|splice|split|splitTokens|spotLight|sq|sqrt|status|stop|str|stroke|strokeCap|strokeJoin|strokeWeight|subset|substring|tan|text|textAlign|textAscent|textDescent|textFont|textLeading|textMode|textSize|texture|textureMode|textWidth|time|tint|toLowerCase|toUpperCase|translate|triangle|trim|unbinary|unhex|unHint|updatePixels|vertex|volume|year)(?=\s*\()]))))

(collection storage-modifiers
    (zone
        (match
            (regex [\b(public|private|protected|static|final|native|synchronized|abstract|threadsafe|transient)\b]
                (1 storage.modifier.processing)))))

(collection enums
    (zone
        (start
            (regex [^(?=\s*[A-Z0-9_]+\s*({|\(|,))]))
        (end
            (regex [(?=;|})]))
        (subzones
            (zone meta.enum.processing
                (start
                    (regex \w+
                        (0 constant.other.enum.processing)))
                (end
                    (regex [(?=,|;|})]))
                (subzones
                    (include @parens)
                    (zone
                        (start [{])
                        (end [}])
                        (subzones
                            (include @class-body))))))))

(collection comments
    (zone comment.block.empty.processing
        (match
            (regex /\*\*/
                (0 punctuation.definition.comment.processing))))
    (include @comments-javadoc)
    (include @comments-inline))

(collection methods
    (zone meta.method.processing
        (start
            (regex [(?!new)(?=\w.*\s+)(?=[^=]+\()(?=.+{)]))
        (end
            (regex [}|(?=;)]))
        (subzones
            (include @storage-modifiers)
            (zone meta.method.identifier.processing
                (start
                    (regex [(\w+)\s*\(]
                        (1 entity.name.function.processing)))
                (end
                    (regex [\)]))
                (subzones
                    (include @parameters)))
            (zone meta.method.return-type.processing
                (start
                    (regex [(?=\w.*\s+\w+\s*\()]))
                (end
                    (regex [(?=\w+\s*\()]))
                (subzones
                    (include @all-types)))
            (include @throws)
            (zone meta.method.body.processing
                (start [{])
                (end
                    (regex [(?=})]))
                (subzones
                    (include @code))))))

(collection object-types
    (include @processing-classes)
    (zone storage.type.generic.processing
        (start
            (regex [\b((?:[a-z]\w*\.)*[A-Z]+\w*)<]))
        (end
            (regex [>|[^\w\s,\?<\[\]]]))
        (subzones
            (include @object-types)
            (zone storage.type.generic.processing
                (start <)
                (end
                    (regex [>|[^\w\s,\[\]<]])))))
    (zone storage.type.object.array.processing
        (start
            (regex `\b((?:[a-z]\w*\.)*[A-Z]+\w*)(?=\[)`))
        (end
            (regex `(?=[^\]\s])`))
        (subzones
            (zone
                (start
                    (regex `\[`))
                (end
                    (regex `\]`))
                (subzones
                    (include @code)))))
    (zone storage.type.processing
        (match
            (regex [\b(?:[a-z]\w*(\.))*[A-Z]+\w*\b]
                (1 keyword.operator.dereference.processing)))))

(collection parens
    (zone
        (start
            (regex [\(]))
        (end
            (regex [\)]))
        (subzones
            (include @code))))

(collection primitive-arrays
    (zone storage.type.primitive.array.processing
        (match
            (regex [\b(?:void|boolean|byte|char|color|short|int|float|long|double)(?=(\[\s*\])+)\b]))))

(collection processing-variables-and-constants
    (zone variable.other.processing
        (match
            (regex [\b(focused|frameCount|frameRate|height|height|key|keyCode|keyPressed|mouseButton|mousePressed|mouseX|mouseY|online|pixels|pmouseX|pmouseY|screen|width)(?!\s*\()\b])))
    (zone support.constant.processing
        (match
            (list ADD ALIGN_CENTER ALIGN_LEFT ALIGN_RIGHT ALPHA ALPHA_MASK ALT AMBIENT ARGB ARROW BACKSPACE BEVEL BLEND BLEND BLUE_MASK BLUR CENTER CENTER_RADIUS CHATTER CODED COMPLAINT COMPONENT COMPOSITE CONCAVE_POLYGON CONTROL CONVEX_POLYGON CORNER CORNERS CROSS CUSTOM DARKEST DEGREES DEG_TO_RAD DELETE DIFFERENCE DIFFUSE DISABLED DISABLE_TEXT_SMOOTH DOWN ENTER EPSILON ESC GIF GREEN_MASK GREY HALF HALF_PI HALF_PI HAND HARD_LIGHT HSB IMAGE INVERT JAVA2D JPEG LEFT LIGHTEST LINES LINE_LOOP LINE_STRIP MAX_FLOAT MITER MODEL MOVE MULTIPLY NORMALIZED NO_DEPTH_TEST NTSC ONE OPAQUE OPENGL ORTHOGRAPHIC OVERLAY P2D P3D PAL PERSPECTIVE PI PI PIXEL_CENTER POINTS POLYGON POSTERIZE PROBLEM PROJECT QUADS QUAD_STRIP QUARTER_PI RADIANS RAD_TO_DEG RED_MASK REPLACE RETURN RGB RIGHT ROUND SCREEN SECAM SHIFT SOFT_LIGHT SPECULAR SQUARE SUBTRACT SVIDEO TAB TARGA TEXT TFF THIRD_PI THRESHOLD TIFF TRIANGLES TRIANGLE_FAN TRIANGLE_STRIP TUNER TWO TWO_PI TWO_PI UP WAIT WHITESPACE)
            (boundary.both))))